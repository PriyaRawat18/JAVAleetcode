/*Given an array of strings strs, group the anagrams together. You can return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

 

Example 1:

Input: strs = ["eat","tea","tan","ate","nat","bat"]
Output: [["bat"],["nat","tan"],["ate","eat","tea"]]
Example 2:

Input: strs = [""]
Output: [[""]]
Example 3:

Input: strs = ["a"]
Output: [["a"]]
 */


/* the solution is very simple just find the sorted string value and then check in the map for the corresponding list 
, if list found then add the value to the list , if not then create a new list and then add the value 


run a forloop to iterate through the array

1. create a map of "key = string" and "value = List<String>" like 

map<String , List<String>>

2. then convert the string to array, sort the array , convert the array to string , by this we will find the sorted string , this will help in checking the anagram from the map 

3. then take the value of sorted string and check in the map ("using getorDefault") for the respective list , and store the value in a list 

4. getOrDefalt( ) -> this take two inpur one is the key and another is the default value,
if value for the searched key found then it return the value , otherwise it return the defult value

*/




class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        
        Map<String, List<String>> ans = new HashMap();
        
        for(String s : strs){
            char [] arr = s.toCharArray();
            Arrays.sort(arr);
            String val = String.valueOf(arr);
            
            List<String> lst = ans.getOrDefault(val, new ArrayList());//if value for the searched string found then return the list otherwise return the defalut list 
            lst.add(s);
            
            ans.put(val, lst);
        }
        
        return new ArrayList(ans.values());
        
    }   
}
